# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

# require 'enumerable'

require 'prime'
require 'set'

def num_of_divisors_naive n
  divs = Set.new
  (1..Math.sqrt(n)).each do |i|
    if n % i == 0 then
      divs << i
      divs << n / i
    end
  end
  divs.size
end

def num_of_divisors_using_prime n
  return 0 if n <= 1
  Prime.prime_division(n).collect {|arr| arr.last + 1}.inject(&:*)
end

class Triangle
  include Enumerable

  def self.each
    i, tr = 0, 0
    loop do
      i += 1
      tr += i
      yield tr
    end
  end
end

TARGET = 500.freeze

Triangle.each do |tr|
  # siz = num_of_divisors_naive tr
  siz = num_of_divisors_using_prime tr
  if siz > TARGET then
    puts "trian = #{tr}, size = #{siz}"
    break
  end
end
