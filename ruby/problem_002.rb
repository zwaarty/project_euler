# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.

require 'benchmark'

class Fibonacci
  @cache = {0 => 0, 1 => 1}

  def self.seq n
    Array.new(n) { |i| nth i}
  end

  def self.nth n
    @cache[n] ||= nth(n-1) + nth(n-2)
  end
end

def fibo n
  n.times.each_with_object([0, 1]) { |i, seq| seq << seq[-2] + seq[-1] }
end

def solve mthd
  fibs = mthd.call(100)
  sum = fibs.select { |n| n < 4_000_000 and n.even? }.inject(&:+);
  puts "ans = #{sum}"
end

Benchmark.bm do |x|
  x.report("memoize:") { solve(Fibonacci.method(:seq)) }
  x.report("each_with_object:") { solve(method(:fibo)) }
end
